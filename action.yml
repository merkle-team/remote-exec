name: 'Remote execute command'
description: 'Execute a stack command on a remote host'
inputs:
  git-repo:
    description: The git repo to clone
    required: true
  git-ref:
    description: Commit ref to check out (typically a hash)
    required: true
  docker-image:
    description: Full path to Docker image to deploy
    required: true
  command:
    description: The stack command to execute ("plan" or "deploy")
    required: true
  role:
    description: ARN of the role to assume
    required: true
  project:
    description: 'Project name as specified in the deploy.yml configuration'
    required: true
  ssh-user:
    description: 'Username to connect to the remote host as'
    required: false
    default: ec2-user
  ssh-host:
    description: 'Hostname of the remote machine to SSH into'
    required: false
    default: 10.0.3.164
  release-id:
    description: 'Name of the release (typically a date and commit hash)'
    required: false
runs:
  using: "composite"
  steps:
    - name: Set release ID
      id: set-release
      shell: bash
      run: |
        if [ -z "${{ inputs.release-id }}" ]; then
          release="$(date -u +"%Y-%m-%dT%H-%M-%S-%3NZ")-${{ inputs.git-ref }}"
        else
          release="${{ inputs.release-id }}"
        fi
        echo "release = $release"
        echo "release=$release" >> "$GITHUB_OUTPUT"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role }}
        aws-region: us-east-1

    - name: Install awsh
      shell: bash
      run: bash -c "$(curl -fsSL https://raw.githubusercontent.com/warpcast/awsh/refs/heads/main/install.sh)"

    # Clone just the Stack deploy configuration.
    # We do this here instead of on the deployer since the GitHub Actions runner already has SSH permissions configured
    - name: Clone deploy configuration
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.git-repo }}
        ref: ${{ inputs.git-ref }}
        sparse-checkout: |
          .stack

    - name: Copy deploy configuration and execute `stack ${{ inputs.command }}` on ${{ inputs.remote-host }}
      shell: bash
      run: |
        # -4 // Force SSH to connect via IPV4
        # -T // Disable pseudo-terminal allocation (we don't want interactive prompts)
        # -A // Forward credentials to SSH agent (allows SSHing to deployed hosts)
        # -o BatchMode=yes // Disable interactivity
        # -o UserKnownHostsFile=/dev/null // Don't remember any known hosts since AWS recycles IPs often
        # -o StrictHostKeyChecking=no // Don't check against any known hosts
        #
        # Set CI=true to disable animations in Terraform CDK which bloat the logs
        tar -zcf - .stack | /usr/local/bin/awsh -4 -T -A -oBatchMode=yes ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} bash -c "(mkdir -p stack-projects/${{ inputs.project }}) && cd stack-projects/${{ inputs.project }} && cat -  | tar -xzf - .stack && env STACK_DOCKER_IMAGE="${{ inputs.docker-image }}" CI=true stack ${{ inputs.command }} --yes --release=${{ steps.set-release.outputs.release }}"
